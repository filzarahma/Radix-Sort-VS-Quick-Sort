#include <iostream>
using namespace std;

void tukarNilai(int *x, int *y) {
/* I.S : terdefinisi dua buah elemen integer x dan y
   F.S : nilai a dan b ditukar */
  int z = *x;
  *x = *y;
  *y = z;
}

void printArray(int array[], int size) {
/* I.S : terdefinisi sebuah array dengan ukuran (size) tertentu
   F.S : isi dari array ditampilkan pada layar */
  int i;
  for (i = 0; i < size; i++)
    cout << array[i] << " ";
  cout << endl;
}

int partition(int array[], int bawah, int atas) {
/* I.S : terdefinisi sebuah array dengan variabel bawah sebagai index min dan variabel atas sebagai index max
   F.S : dikembalikan titik partisi */
    
  // pilih elemen paling kanan sebagai pivot
  int pivot = array[atas];
  
  // pointer untuk elemen yang lebih besar
  int i = (bawah - 1);

  // mengecek setiap elemen pada array
  // bandingkan dengan pivot
  for (int j = bawah; j < atas; j++) {
    if (array[j] <= pivot) {
        
      // jika elemen yang lebih kecil dari pivot ditemukan
      // tukar dengan elemen yang lebih besar yang ditunjukkan oleh i
      i++;
      
      // tukar elemen di i dengan elemen di j
      tukarNilai(&array[i], &array[j]);
    }
  }
  
  // tukar pivot dengan elemen yang lebih besar di i
  tukarNilai(&array[i + 1], &array[atas]);
  
  // kembalikan titik partisi
  return (i + 1);
}

void quickSort(int array[], int bawah, int atas) {
/* I.S : terdefinisi sebuah array dengan variabel bawah sebagai index min dan variabel atas sebagai index max
   F.S : nilai dalam array terurut secara ascending */
  if (bawah < atas) {
      
    // temukan elemen pivot
    // elemen yang lebih kecil dari pivot berada di kiri pivot
    // elemen yang lebih besar dari pivot berada di kanan pivot
    int pi = partition(array, bawah, atas);

    // recursive call di sebelah kiri pivot
    quickSort(array, bawah, pi - 1);

    // recursive call di sebelah kanan pivot
    quickSort(array, pi + 1, atas);
  }
}

int main() {
  int data[] = {10, 0, 3, 2, 5, 4, 4, 1, 9};
  int n = sizeof(data) / sizeof(data[0]);
  
  cout << "Unsorted Array : \n";
  printArray(data, n);
  
  // melakukan quick sort pada data
  quickSort(data, 0, n - 1);
  
  cout << "Sorted array in ascending order : \n";
  printArray(data, n);
}
